import re
from math import gcd
from functools import reduce

def decodeBits(bits):
    # 1. Quitar ceros al inicio y al final
    bits = bits.strip('0')

    # 2. Obtener grupos de 1s y 0s
    groups = re.findall(r'1+|0+', bits)

    # 3. Obtener las longitudes de cada grupo
    lengths = [len(g) for g in groups]

    # 4. Calcular la unidad mínima de tiempo (GCD)
    unit = reduce(gcd, lengths)

    # 5. Traducir grupos en Morse
    morse = ''
    for g in groups:
        length = len(g) // unit
        if g[0] == '1':
            if length == 1:
                morse += '.'
            elif length == 3:
                morse += '-'
            else:
                morse += '.' * length  # asume dot si no es claro
        else:  # g[0] == '0'
            if length == 1:
                morse += ''  # espacio entre elementos
            elif length == 3:
                morse += ' '
            elif length == 7:
                morse += '   '
            else:
                # Para casos no estándar
                morse += ' ' * (length // 3)
    return morse


def decodeMorse(morseCode):
    words = morseCode.strip().split('   ')  # 3 espacios = palabra
    decoded_words = []

    for word in words:
        letters = word.split()  # 1 espacio = letra
        decoded_letters = [MORSE_CODE[letter] for letter in letters]
        decoded_words.append(''.join(decoded_letters))

    return ' '.join(decoded_words)
